# Generated by Django 4.2.3 on 2023-07-09 00:18

import django.contrib.auth.validators
from django.db import migrations, models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Car',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(null=True)),
                ('model', models.CharField(max_length=100)),
                ('brand', models.CharField(max_length=100)),
                ('price', models.FloatField(default=0.0)),
                ('color', models.CharField(max_length=30)),
                ('year', models.IntegerField(default=0)),
                ('km_road', models.FloatField(default=0.0)),
                ('motor_type', models.CharField(choices=[('HYBRID', 'Híbrido'), ('COMBUSTION', 'Combustão'), ('ELETRIC', 'Eletríco')], default='COMBUSTION', max_length=20)),
                ('fuel_type', models.CharField(choices=[('Regular gasoline', 'Gasolina comum'), ('Additive gasoline', 'Gasolina Aditivada'), ('Premium gasoline', 'Gasolina premium'), ('Ethanol', 'Etanol'), ('Additive Ethanol', 'Etanol aditivado'), ('Regular Diesel', 'Diesel comum'), ('Diesel S10', 'Diesel S-10'), ('Additive Diesel', 'Diesel aditivado'), ('Premium Diesel', 'Diesel premium'), ('CNG', 'GNV (GAS NATURAL)'), ('Eletricity', ' Eletricidade')], default='Regular gasoline', max_length=20)),
                ('transmission_type', models.CharField(choices=[('MANUAL', 'Manual'), ('AUTOMATIC', 'Automático'), ('AUTOMATIZED', 'Automatizado')], default='MANUAL', max_length=20)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='uploads/car/img/%Y/%m/%d/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'api_tb_car',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_active', models.BooleanField(default=True, help_text='Desigina a este usuário a permissão de acessar as funcionalidades do sistema ', verbose_name='Ativo no sistema')),
                ('is_staff', models.BooleanField(default=False, help_text='Desigina a este usuário permissões parciais de acesso que usuários comuns não teriam.', verbose_name='Status de membro')),
                ('is_admin', models.BooleanField(default=False, help_text='Desigina a este usuário total permissão ao sistema.', verbose_name='Status de admin')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('username', models.CharField(error_messages={'unique': 'Já existe um usuraio com este username.'}, help_text='Obrigatório. 150 caracteres ou menos. Letras, digitos e @/./+/-/_ somente.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='Nome')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='Sobrenome')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Endereço de email')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'api_user',
            },
        ),
    ]
